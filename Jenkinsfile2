pipeline {
    agent any

    environment {
        JENKINS_USERNAME = "anshsehgal03"
        API_TOKEN = "111f6c4ef5414f3179be58d86d9301eef8"
        API_ENDPOINT = "http://localhost:3000/webhook"
        JENKINS_URL = "http://localhost:8080"
        JOB_NAME = "Portfolio1CICD"
        IV_KEY = "1234567890123456"
        SECRET_KEY="1234567890abcdeffedcba0987654321"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/anshsehgal13/Portfolio/'
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    if (fileExists('package.json')) {
                        sh 'npm install'
                    } else {
                        echo "âš  No package.json found, skipping dependency installation."
                        sh 'exit 1'
                    }
                }
            }
        }

        stage('Build Website') {
            steps {
                script {
                    if (fileExists('package.json')) {
                        sh 'npm run build'
                    } else {
                        echo "âš  No build step required for static HTML site."
                    }
                }
            }
        }

        stage('Deploy to Render') {
            steps {
                script {
                    sh 'echo "ðŸš€ Deploying to Render..."'
                }
            }
        }
    }


    post {
        always {
            script {

                    def API_URL_1 = "${env.JENKINS_URL}/job/${env.JOB_NAME}/${env.BUILD_NUMBER}/api/json"
                    def API_URL_2 = "${env.JENKINS_URL}/job/${env.JOB_NAME}/${env.BUILD_NUMBER}/wfapi/describe"
                    def WEBHOOK_URL = "http://localhost:3000/webhook"

                    // Fetch Jenkins API responses
                    def buildData = sh(script: "curl -s -u '${JENKINS_USERNAME}:${API_TOKEN}' '${API_URL_1}'", returnStdout: true).trim()
                    def stageData = sh(script: "curl -s -u '${JENKINS_USERNAME}:${API_TOKEN}' '${API_URL_2}'", returnStdout: true).trim()
                    
                    
                    // Compute Checksum
                    def checksum_build = sh(script: "echo -n '${buildData}' | sha256sum | awk '{print \$1}'", returnStdout: true).trim()
                    def checksum_stage = sh(script: "echo -n '${stageData}' | sha256sum | awk '{print \$1}'", returnStdout: true).trim()
                    
                    //Make the payload
                    def payload = [
                        build_data: buildData,
                        stage_data: stageData
                    ]
                    def jsonPayload = groovy.json.JsonOutput.toJson(payload)
                    
                    // Encrypt timestamp with AES-256-CBC
                    def timestamp = System.currentTimeMillis().toString()
                    def encryptedTimestamp = sh(script: """
                        echo -n '${timestamp}' | openssl enc -aes-256-cbc -base64 \\
                        -K \$(echo -n '${SECRET_KEY}' | xxd -p | tr -d '\\n') \\
                        -iv \$(echo -n '${IV_KEY}' | xxd -p | tr -d '\\n')
                    """, returnStdout: true).trim()


                    // Send the payload with checksum as a header
                    sh """
                        curl -X POST '${WEBHOOK_URL}' \\
                        -H "Content-Type: application/json" \\
                        -H "X-Encrypted-Timestamp: ${encryptedTimestamp}" \\
                        -H "X-Checksum-Build: ${checksum_build}" \\
                        -H "X-Checksum-Stage: ${checksum_stage}" \\
                        -d '${jsonPayload}'
       Â Â Â Â Â Â Â Â Â Â Â Â Â """
            }
        }
    }
}
