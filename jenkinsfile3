pipeline {
    agent any

    environment {
        JENKINS_USERNAME = "anshsehgal03"
        API_TOKEN = "111f6c4ef5414f3179be58d86d9301eef8"
        IV_KEY = "1234567890123456"
        SECRET_KEY="1234567890abcdeffedcba0987654321"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/anshsehgal13/Portfolio/'
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    if (fileExists('package.json')) {
                        sh 'npm install'
                    } else {
                        echo "âš  No package.json found, skipping dependency installation."
                    }
                }
            }
        }

        stage('Build Website') {
            steps {
                script {
                    if (fileExists('package.json')) {
                        sh 'npm run build'
                    } else {
                        echo "âš  No build step required for static HTML site."
                    }
                }
            }
        }

        stage('Deploy to Render') {
            steps {
                script {
                    sh 'echo "ðŸš€ Deploying to Render..."'
                    
                }
            }
        }
    }


   post {
    always {
        script {
            withCredentials([
                string(credentialsId: 'jenkins-username', variable: 'JENKINS_USERNAME'),
                string(credentialsId: 'api-token', variable: 'API_TOKEN'),
                string(credentialsId: 'secret-key', variable: 'SECRET_KEY'),
                string(credentialsId: 'iv-key', variable: 'IV_KEY')
            ]) {
                def getApiData = { url -> sh(script: "curl -s -u '${JENKINS_USERNAME}:${API_TOKEN}' '${url}'", returnStdout: true).trim() }

                def buildData = getApiData("${env.JENKINS_URL}/job/${env.JOB_NAME}/${env.BUILD_NUMBER}/api/json")
                def stageData = getApiData("${env.JENKINS_URL}/job/${env.JOB_NAME}/${env.BUILD_NUMBER}/wfapi/describe")
                def consoleData = getApiData("${env.JENKINS_URL}/job/${env.JOB_NAME}/${env.BUILD_NUMBER}/consoleText")

                def checksum = { data -> sh(script: "echo -n '${data}' | sha256sum | awk '{print \$1}'", returnStdout: true).trim() }
                def checksum_build = checksum(buildData)
                def checksum_stage = checksum(stageData)

                def payload = groovy.json.JsonOutput.toJson([build_data: buildData, stage_data: stageData])
                def timestamp = System.currentTimeMillis().toString()

                def encryptedTimestamp = sh(script: """
                    echo -n '${timestamp}' | openssl enc -aes-256-cbc -base64 \\
                    -K \$(echo -n '${SECRET_KEY}' | xxd -p | tr -d '\\n') \\
                    -iv \$(echo -n '${IV_KEY}' | xxd -p | tr -d '\\n')
                """, returnStdout: true).trim()

                def webhookUrl = env.WEBHOOK_URL ?: 'https://0e36-192-245-162-37.ngrok-free.app/webhook'
                def consoleUrl = env.CONSOLE_URL ?: 'https://0e36-192-245-162-37.ngrok-free.app/console'
                def consoleBase64 = sh(script: "echo '${consoleData}' | base64", returnStdout: true).trim()

                sh """
                    curl -X POST '${webhookUrl}' \\
                    -H "Content-Type: application/json" \\
                    -H "X-Encrypted-Timestamp: ${encryptedTimestamp}" \\
                    -H "X-Checksum-Build: ${checksum_build}" \\
                    -H "X-Checksum-Stage: ${checksum_stage}" \\
                    -d '${payload}'
                """

                sh """
                    curl -X POST '${consoleUrl}' \\
                    -H "Content-Type: text/plain" \\
                    --data '${consoleBase64}'
                """
            }
 Â Â Â Â Â Â Â }
Â Â Â Â }
}
}
